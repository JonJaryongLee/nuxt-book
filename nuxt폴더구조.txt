.nuxt : 캐시파일(nuxt 가 자동으로 생성)

assets: 정적 파일들

package.json: 프로젝트 설정 파일
  -> npm (자바스크립트 패키지 관리자)
  -> 우리 프로젝트의 패키지 관리
  -> npm install (npm i)

node_modules: 실제 패키지들이 설치되는 폴더
  -> 개발자가 직접 조작할 일은 X
  -> npm 명령어로 제어

layouts
  - 틀(레이아웃)
  - 여러 페이지에서 공통적으로 사용되는 틀
  - ex) 우리 페이지들은 아래와 같은 구조가 사용된다.
    - 네비 + 내용 + 푸터
  - 기본적으로 default.vue 로 적용

pages
  - 한 페이지에 해당하는 코드
  - 한 페이지는 여러 컴포넌트를 포함할 수 있다.
  - 공통된 역할을 하는 페이지들을 디렉토리로 묶어준다.

components
  - 한 페이지의 구성 요소(일부)에 해당하는 코드
  - 메인 역할: 재사용할 구성 요소를 따로 빼는 역할
  - 추가적인 역할: 한 페이지의 요소가 너무 많아서 가독성이 떨어질 때
    -> 실무에서는 컴포넌트 분리 규칙을 정하는 경우가 많다.
  - 공통된 역할을 하는 컴포넌트들을 디렉토리로 묶어준다.

server
  - 서버와 연결되는 로직에 해당하는 코드
  - 백엔드에 가기 전에 공통적으로 해당하는 로직
  - 각 http method 에 따라 get.js, post.js 등으로 나누어서 개발
  - 공통된 요청 주소에 따라 디렉토리로 묶어준다.

stores (pinia 꺼)
  - 컴포넌트들끼리 공유되는 자원을 저장하는 곳
  - ex) 두 가지 컴포넌트에서만 사용하는 데이터
	-> props + emit 으로 해결
  - ex) 적어도 세 가지 이상 컴포넌트들에서 사용
	-> pinia 에 저장
  - 공통된 부분을 묶어서 하나의 store 로 저장
  - ex) 유저에서 관리자, 일반 사용자, 직원 세 가지를 관리해야 함
    -> stores/users 폴더 생성
      -> admin.js / normal.js / worker.js 로 생성
      -> 혹은 users.js 에 세 가지 스토어로 생성(코드 가독성에 따라 구분)

nuxt.config.ts
  - module 관련 설정들을 모두 작성



